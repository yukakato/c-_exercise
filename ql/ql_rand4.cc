#include <iostream>
#include <time.h>
using namespace std;

// Q値が入力される行列，経路のない項目は-1
double q[12][12] = {
    {-1,  0, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1},
    { 0, -1,  0, -1, -1,  0, -1, -1, -1, -1, -1, -1},
    {-1,  0, -1,  0, -1, -1,  0, -1, -1, -1, -1, -1},
    {-1, -1,  0, -1, -1, -1, -1,  0, -1, -1, -1, -1},
    { 0, -1, -1, -1, -1,  0, -1, -1,  0, -1, -1, -1},
    {-1,  0, -1, -1,  0, -1,  0, -1, -1,  0, -1, -1},
    {-1, -1,  0, -1, -1,  0, -1,  0, -1, -1,  0, -1},
    {-1, -1, -1,  0, -1, -1,  0, -1, -1, -1, -1,  0},
    {-1, -1, -1, -1,  0, -1, -1, -1, -1,  0, -1, -1},
    {-1, -1, -1, -1, -1,  0, -1, -1,  0, -1,  0, -1},
    {-1, -1, -1, -1, -1, -1,  0, -1, -1,  0, -1,  0},
    {-1, -1, -1, -1, -1, -1, -1,  0, -1, -1,  0, -1}
};

double a = 0.1;  // 学習係数α
double g = 0.9;  // 割引率γ

// Q値を初期化する
void initialize() {
    srand((unsigned int)time(NULL));
    // [0,99]の範囲の乱数を生成し，-1でない項目の初期値にする
    for (int i = 0; i < 12; ++i)
        for (int j = 0; j < 12; ++j)
            if (q[i][j] != -1) q[i][j] = rand() % 100;
}

// Q値を更新しながら10ステップ移動する
void action() {
    int st = 0;         // 状態s_t
    int st1 = 0;        // 状態s_t+1
    double max_st = 0;  // 状態s_tからのQ値の最大値
    double max_st1 = 0; // 状態s_t+1からのQ値の最大値

    // 初期値0から10ステップ移動
    for (int t = 0; t < 10; ++t) {
        // Q値が最大になる状態に移動する
        for (int i = 0; i < 12; ++i) {
            if (max_st < q[st][i]) {
                max_st = q[st][i];
                st1 = i;
            }
        }

        // 状態s_t+1からのQ値の最大値を求める
        for (int i = 0; i < 12; ++i)
            if (max_st1 < q[st1][i]) max_st1 = q[st1][i];
        
        // 更新式に従ってQ値を更新する，s_t+1がGoalのときだけ報酬は100
        if (st1 == 11)
            q[st][st1] = q[st][st1] + a * (100 + g * max_st1 - q[st][st1]);
        else
            q[st][st1] = q[st][st1] + a * (g * max_st1 - q[st][st1]);

        // s_t+1に移動して同じ処理を繰り返す
        st = st1;
        // 各値を初期化する
        max_st = 0;
        max_st1 = 0;
    }
}

// 結果を出力する
void print_q(void) {
    cout << endl;
    cout << "       --" << (int)q[8][9] << "--> " 
         << "      --" << (int)q[9][10] << "--> " 
         << "      --" << (int)q[10][11] << "-->" << endl;
    cout << "       <--" << (int)q[9][8] << "-- " 
         << "      <--" << (int)q[10][9] << "-- "
         << "      <--" << (int)q[11][10] << "-- " << endl << endl;
    cout << (int)q[4][8] << "|" << (int)q[8][4] << "        " 
         << (int)q[5][9] << "|" << (int)q[9][5] << "        " 
         << (int)q[6][10] << "|" << (int)q[10][6] << "         " 
         << (int)q[7][11] << "|" << (int)q[11][7] << endl << endl;
    cout << "       --" << (int)q[4][5] << "--> " 
         << "      --" << (int)q[5][6] << "--> " 
         << "      --" << (int)q[6][7] << "-->" << endl;
    cout << "       <--" << (int)q[5][4] << "-- " 
         << "      <--" << (int)q[6][5] << "-- "
         << "      <--" << (int)q[7][6] << "-- " << endl << endl;
    cout << (int)q[0][4] << "|" << (int)q[4][0] << "        " 
         << (int)q[1][5] << "|" << (int)q[5][1] << "        " 
         << (int)q[2][6] << "|" << (int)q[6][2] << "         " 
         << (int)q[3][7] << "|" << (int)q[7][3] << endl << endl;
    cout << "       --" << (int)q[0][1] << "--> " 
         << "      --" << (int)q[1][2] << "--> " 
         << "      --" << (int)q[2][3] << "-->" << endl;
    cout << "       <--" << (int)q[1][0] << "-- " 
         << "      <--" << (int)q[2][1] << "-- "
         << "      <--" << (int)q[3][2] << "-- " << endl << endl;
    cout << "-------------------------------------------------" << endl;
}

// main関数
int main() {
    initialize();
    print_q();     // 初期状態
    for (int i = 0; i < 1000; ++i) action();
    print_q();     // 1000行動後
    for (int i = 0; i < 5000; ++i) action();
    print_q();     // 10000行動後
}
